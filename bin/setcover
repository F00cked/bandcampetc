#!/usr/bin/env bash

# Last modification: 19d02m16y.

# Frontend for eyeD3, which is a bit too violent with --add-image and
# --remove-images (it accepts about any type of file and it can corrupt stuff).
# While eyeD3, when called on a directory, seems to process every file in it,
# this script only tries to do stuff with '*.mp3' / '*.MP3'.
# Note that if metaflac is installed, FLAC files will be processed too.


# Get the name of the directory the current script sits in.
readonly SCR_DIR=$(
    dirname "$(readlink -f -- "$0")"
)


function f_help {
    echo "$(basename "$0"): Syntax to tag FILE with PICTURE:"
    echo "    $(basename "$0") FILE PICTURE"
    echo "Give an empty string for PICTURE to remove covers."
    echo "Note that any previous picture will be removed either way."
    echo "If FILE is a directory, FILE/*.mp3 and FILE/*.MP3 will be targeted."
    echo "If \"metaflac\" is installed, FLAC files will also be processed."
}


if [ $# -eq 1 ] && grep -qxE 'help|-help|--help|-h|h' <<< "$1"
then
    f_help
    exit 0
fi


if [ $# -lt 2 ]
then
    f_help >&2
    exit 1
fi


glob_errors=0


METAFLAC=metaflac


. "$SCR_DIR"/../lib/setcover_functions.sh || exit


pic=$2

if [ "$pic" ]
then
    if [ ! -r "$pic" ]
    then
        echo "$(basename "$0"): Error: Could not find or read the picture \"$pic\"." >&2
        exit 2
    fi

    mime="$(file -b --mime-type "$pic")"

    if [ "$mime" != 'image/png' -a "$mime" != 'image/jpeg' ]
    then
        echo "$(basename "$0"): Error: \"$pic\" does not seem to be a JPG nor a PNG file." >&2
        exit 3
    fi
fi # /if pic not empty

target="$1"

if [ ! -e "$target" ]
then
    echo "$(basename "$0"): Error: \"$target\" does not seem to exist." >&2
    exit 4
fi

if [ ! -r "$target" ]
then
    echo "$(basename "$0"): Error: \"$target\" exists but cannot be read." >&2
    exit 5
fi

if [ -d "$target" ]
then
    # TARGETING A DIRECTORY
    target=$(sed 's:/\+$::' <<< "$target")
    find "$target" -maxdepth 1 -type f -iregex '.*\.\(mp3\|flac\)' -print0 | while read -rd '' file
    do
        test -f "$file" || continue
        test -r "$file" || continue
        
        f_single_file "$file" "$pic"
    done
else
    # TARGETING A SINGLE FILE
    f_single_file "$target" "$pic"
fi

echo "End of $(basename "$0"). ${glob_errors} error(s)."

exit 0
